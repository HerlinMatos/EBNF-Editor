{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/yaml/yaml.js"],"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","offSide","language","tokenPostfix","token","keywords","numberInteger","numberFloat","numberOctal","numberHex","numberInfinity","numberNaN","numberDate","escapes","tokenizer","root","include","cases","object","array","multiString","multiStringContinued","next","whitespace","comment","flowCollections","flowScalars","doubleQuotedString","blockStyle","flowNumber","tagHandle","anchor"],"mappings":"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","file":"yaml.c0bbf3cb.js","sourceRoot":"..","sourcesContent":["export var conf = {\n    comments: {\n        lineComment: '#'\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ],\n    folding: {\n        offSide: true\n    }\n};\nexport var language = {\n    tokenPostfix: '.yaml',\n    brackets: [\n        { token: 'delimiter.bracket', open: '{', close: '}' },\n        { token: 'delimiter.square', open: '[', close: ']' }\n    ],\n    keywords: ['true', 'True', 'TRUE', 'false', 'False', 'FALSE', 'null', 'Null', 'Null', '~'],\n    numberInteger: /(?:0|[+-]?[0-9]+)/,\n    numberFloat: /(?:0|[+-]?[0-9]+)(?:\\.[0-9]+)?(?:e[-+][1-9][0-9]*)?/,\n    numberOctal: /0o[0-7]+/,\n    numberHex: /0x[0-9a-fA-F]+/,\n    numberInfinity: /[+-]?\\.(?:inf|Inf|INF)/,\n    numberNaN: /\\.(?:nan|Nan|NAN)/,\n    numberDate: /\\d{4}-\\d\\d-\\d\\d([Tt ]\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(( ?[+-]\\d\\d?(:\\d\\d)?)|Z)?)?/,\n    escapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\n    tokenizer: {\n        root: [\n            { include: '@whitespace' },\n            { include: '@comment' },\n            // Directive\n            [/%[^ ]+.*$/, 'meta.directive'],\n            // Document Markers\n            [/---/, 'operators.directivesEnd'],\n            [/\\.{3}/, 'operators.documentEnd'],\n            // Block Structure Indicators\n            [/[-?:](?= )/, 'operators'],\n            { include: '@anchor' },\n            { include: '@tagHandle' },\n            { include: '@flowCollections' },\n            { include: '@blockStyle' },\n            // Numbers\n            [/@numberInteger(?![ \\t]*\\S+)/, 'number'],\n            [/@numberFloat(?![ \\t]*\\S+)/, 'number.float'],\n            [/@numberOctal(?![ \\t]*\\S+)/, 'number.octal'],\n            [/@numberHex(?![ \\t]*\\S+)/, 'number.hex'],\n            [/@numberInfinity(?![ \\t]*\\S+)/, 'number.infinity'],\n            [/@numberNaN(?![ \\t]*\\S+)/, 'number.nan'],\n            [/@numberDate(?![ \\t]*\\S+)/, 'number.date'],\n            // Key:Value pair\n            [/(\".*?\"|'.*?'|.*?)([ \\t]*)(:)( |$)/, ['type', 'white', 'operators', 'white']],\n            { include: '@flowScalars' },\n            // String nodes\n            [/.+$/, {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@default': 'string'\n                    }\n                }]\n        ],\n        // Flow Collection: Flow Mapping\n        object: [\n            { include: '@whitespace' },\n            { include: '@comment' },\n            // Flow Mapping termination\n            [/\\}/, '@brackets', '@pop'],\n            // Flow Mapping delimiter\n            [/,/, 'delimiter.comma'],\n            // Flow Mapping Key:Value delimiter\n            [/:(?= )/, 'operators'],\n            // Flow Mapping Key:Value key\n            [/(?:\".*?\"|'.*?'|[^,\\{\\[]+?)(?=: )/, 'type'],\n            // Start Flow Style\n            { include: '@flowCollections' },\n            { include: '@flowScalars' },\n            // Scalar Data types\n            { include: '@tagHandle' },\n            { include: '@anchor' },\n            { include: '@flowNumber' },\n            // Other value (keyword or string)\n            [/[^\\},]+/, {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@default': 'string'\n                    }\n                }]\n        ],\n        // Flow Collection: Flow Sequence\n        array: [\n            { include: '@whitespace' },\n            { include: '@comment' },\n            // Flow Sequence termination\n            [/\\]/, '@brackets', '@pop'],\n            // Flow Sequence delimiter\n            [/,/, 'delimiter.comma'],\n            // Start Flow Style\n            { include: '@flowCollections' },\n            { include: '@flowScalars' },\n            // Scalar Data types\n            { include: '@tagHandle' },\n            { include: '@anchor' },\n            { include: '@flowNumber' },\n            // Other value (keyword or string)\n            [/[^\\],]+/, {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@default': 'string'\n                    }\n                }]\n        ],\n        // First line of a Block Style\n        multiString: [\n            [/^( +).+$/, 'string', '@multiStringContinued.$1']\n        ],\n        // Further lines of a Block Style\n        //   Workaround for indentation detection\n        multiStringContinued: [\n            [/^( *).+$/, {\n                    cases: {\n                        '$1==$S2': 'string',\n                        '@default': { token: '@rematch', next: '@popall' }\n                    }\n                }]\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, 'white']\n        ],\n        // Only line comments\n        comment: [\n            [/#.*$/, 'comment']\n        ],\n        // Start Flow Collections\n        flowCollections: [\n            [/\\[/, '@brackets', '@array'],\n            [/\\{/, '@brackets', '@object']\n        ],\n        // Start Flow Scalars (quoted strings)\n        flowScalars: [\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/'[^']*'/, 'string'],\n            [/\"/, 'string', '@doubleQuotedString']\n        ],\n        doubleQuotedString: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, 'string', '@pop']\n        ],\n        // Start Block Scalar\n        blockStyle: [\n            [/[>|][0-9]*[+-]?$/, 'operators', '@multiString']\n        ],\n        // Numbers in Flow Collections (terminate with ,]})\n        flowNumber: [\n            [/@numberInteger(?=[ \\t]*[,\\]\\}])/, 'number'],\n            [/@numberFloat(?=[ \\t]*[,\\]\\}])/, 'number.float'],\n            [/@numberOctal(?=[ \\t]*[,\\]\\}])/, 'number.octal'],\n            [/@numberHex(?=[ \\t]*[,\\]\\}])/, 'number.hex'],\n            [/@numberInfinity(?=[ \\t]*[,\\]\\}])/, 'number.infinity'],\n            [/@numberNaN(?=[ \\t]*[,\\]\\}])/, 'number.nan'],\n            [/@numberDate(?=[ \\t]*[,\\]\\}])/, 'number.date']\n        ],\n        tagHandle: [\n            [/\\![^ ]*/, 'tag']\n        ],\n        anchor: [\n            [/[&*][^ ]+/, 'namespace']\n        ]\n    }\n};\n"]}