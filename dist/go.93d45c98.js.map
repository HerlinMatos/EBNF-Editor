{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/go/go.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","language","defaultToken","tokenPostfix","keywords","operators","symbols","escapes","tokenizer","root","cases","token","include","whitespace","comment","doccomment","string","rawstring"],"mappings":"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","file":"go.93d45c98.js","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/'],\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '`', close: '`', notIn: ['string'] },\n        { open: '\"', close: '\"', notIn: ['string'] },\n        { open: '\\'', close: '\\'', notIn: ['string', 'comment'] },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '`', close: '`' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ]\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.go',\n    keywords: [\n        'break',\n        'case',\n        'chan',\n        'const',\n        'continue',\n        'default',\n        'defer',\n        'else',\n        'fallthrough',\n        'for',\n        'func',\n        'go',\n        'goto',\n        'if',\n        'import',\n        'interface',\n        'map',\n        'package',\n        'range',\n        'return',\n        'select',\n        'struct',\n        'switch',\n        'type',\n        'var',\n        'bool',\n        'true',\n        'false',\n        'uint8',\n        'uint16',\n        'uint32',\n        'uint64',\n        'int8',\n        'int16',\n        'int32',\n        'int64',\n        'float32',\n        'float64',\n        'complex64',\n        'complex128',\n        'byte',\n        'rune',\n        'uint',\n        'int',\n        'uintptr',\n        'string',\n        'nil',\n    ],\n    operators: [\n        '+', '-', '*', '/', '%', '&', '|', '^', '<<', '>>', '&^',\n        '+=', '-=', '*=', '/=', '%=', '&=', '|=', '^=', '<<=', '>>=', '&^=',\n        '&&', '||', '<-', '++', '--', '==', '<', '>', '=', '!', '!=', '<=', '>=', ':=', '...',\n        '(', ')', '', ']', '{', '}', ',', ';', '.', ':'\n    ],\n    // we include these common regular expressions\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // identifiers and keywords\n            [/[a-zA-Z_]\\w*/, {\n                    cases: {\n                        '@keywords': { token: 'keyword.$0' },\n                        '@default': 'identifier'\n                    }\n                }],\n            // whitespace\n            { include: '@whitespace' },\n            // [[ attributes ]].\n            [/\\[\\[.*\\]\\]/, 'annotation'],\n            // Preprocessor directive\n            [/^\\s*#\\w+/, 'keyword'],\n            // delimiters and operators\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/[<>](?!@symbols)/, '@brackets'],\n            [/@symbols/, {\n                    cases: {\n                        '@operators': 'delimiter',\n                        '@default': ''\n                    }\n                }],\n            // numbers\n            [/\\d*\\d+[eE]([\\-+]?\\d+)?/, 'number.float'],\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n            [/0[xX][0-9a-fA-F']*[0-9a-fA-F]/, 'number.hex'],\n            [/0[0-7']*[0-7]/, 'number.octal'],\n            [/0[bB][0-1']*[0-1]/, 'number.binary'],\n            [/\\d[\\d']*/, 'number'],\n            [/\\d/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[;,.]/, 'delimiter'],\n            // strings\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/\"/, 'string', '@string'],\n            [/`/, \"string\", \"@rawstring\"],\n            // characters\n            [/'[^\\\\']'/, 'string'],\n            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n            [/'/, 'string.invalid']\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, ''],\n            [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@doccomment'],\n            [/\\/\\*/, 'comment', '@comment'],\n            [/\\/\\/.*$/, 'comment'],\n        ],\n        comment: [\n            [/[^\\/*]+/, 'comment'],\n            // [/\\/\\*/, 'comment', '@push' ],    // nested comment not allowed :-(\n            // [/\\/\\*/,    'comment.invalid' ],    // this breaks block comments in the shape of /* //*/\n            [/\\*\\//, 'comment', '@pop'],\n            [/[\\/*]/, 'comment']\n        ],\n        //Identical copy of comment above, except for the addition of .doc\n        doccomment: [\n            [/[^\\/*]+/, 'comment.doc'],\n            // [/\\/\\*/, 'comment.doc', '@push' ],    // nested comment not allowed :-(\n            [/\\/\\*/, 'comment.doc.invalid'],\n            [/\\*\\//, 'comment.doc', '@pop'],\n            [/[\\/*]/, 'comment.doc']\n        ],\n        string: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, 'string', '@pop']\n        ],\n        rawstring: [\n            [/[^\\`]/, \"string\"],\n            [/`/, \"string\", \"@pop\"]\n        ],\n    },\n};\n"]}