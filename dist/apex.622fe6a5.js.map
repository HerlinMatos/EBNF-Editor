{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/apex/apex.js"],"names":["conf","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","keywords","uppercaseFirstLetter","lowercase","charAt","toUpperCase","substr","keywordsWithCaseVariations","forEach","push","language","defaultToken","tokenPostfix","operators","symbols","escapes","digits","octaldigits","binarydigits","hexdigits","tokenizer","root","cases","token","include","whitespace","comment","apexdoc","string","next"],"mappings":"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","file":"apex.622fe6a5.js","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    // the default separators except `@$`\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/'],\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')'],\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n        { open: '<', close: '>' },\n    ],\n    folding: {\n        markers: {\n            start: new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?region\\\\b)|(?:<editor-fold\\\\b))\"),\n            end: new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?endregion\\\\b)|(?:</editor-fold>))\")\n        }\n    }\n};\nvar keywords = [\n    'abstract',\n    'activate',\n    'and',\n    'any',\n    'array',\n    'as',\n    'asc',\n    'assert',\n    'autonomous',\n    'begin',\n    'bigdecimal',\n    'blob',\n    'boolean',\n    'break',\n    'bulk',\n    'by',\n    'case',\n    'cast',\n    'catch',\n    'char',\n    'class',\n    'collect',\n    'commit',\n    'const',\n    'continue',\n    'convertcurrency',\n    'decimal',\n    'default',\n    'delete',\n    'desc',\n    'do',\n    'double',\n    'else',\n    'end',\n    'enum',\n    'exception',\n    'exit',\n    'export',\n    'extends',\n    'false',\n    'final',\n    'finally',\n    'float',\n    'for',\n    'from',\n    'future',\n    'get',\n    'global',\n    'goto',\n    'group',\n    'having',\n    'hint',\n    'if',\n    'implements',\n    'import',\n    'in',\n    'inner',\n    'insert',\n    'instanceof',\n    'int',\n    'interface',\n    'into',\n    'join',\n    'last_90_days',\n    'last_month',\n    'last_n_days',\n    'last_week',\n    'like',\n    'limit',\n    'list',\n    'long',\n    'loop',\n    'map',\n    'merge',\n    'native',\n    'new',\n    'next_90_days',\n    'next_month',\n    'next_n_days',\n    'next_week',\n    'not',\n    'null',\n    'nulls',\n    'number',\n    'object',\n    'of',\n    'on',\n    'or',\n    'outer',\n    'override',\n    'package',\n    'parallel',\n    'pragma',\n    'private',\n    'protected',\n    'public',\n    'retrieve',\n    'return',\n    'returning',\n    'rollback',\n    'savepoint',\n    'search',\n    'select',\n    'set',\n    'short',\n    'sort',\n    'stat',\n    'static',\n    'strictfp',\n    'super',\n    'switch',\n    'synchronized',\n    'system',\n    'testmethod',\n    'then',\n    'this',\n    'this_month',\n    'this_week',\n    'throw',\n    'throws',\n    'today',\n    'tolabel',\n    'tomorrow',\n    'transaction',\n    'transient',\n    'trigger',\n    'true',\n    'try',\n    'type',\n    'undelete',\n    'update',\n    'upsert',\n    'using',\n    'virtual',\n    'void',\n    'volatile',\n    'webservice',\n    'when',\n    'where',\n    'while',\n    'yesterday'\n];\n// create case variations of the keywords - apex is case insensitive, but we can't make the highlighter case insensitive\n// because we use a heuristic to assume that identifiers starting with an upper case letter are types.\nvar uppercaseFirstLetter = function (lowercase) { return lowercase.charAt(0).toUpperCase() + lowercase.substr(1); };\nvar keywordsWithCaseVariations = [];\nkeywords.forEach(function (lowercase) {\n    keywordsWithCaseVariations.push(lowercase);\n    keywordsWithCaseVariations.push(lowercase.toUpperCase());\n    keywordsWithCaseVariations.push(uppercaseFirstLetter(lowercase));\n});\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.apex',\n    keywords: keywordsWithCaseVariations,\n    operators: [\n        '=', '>', '<', '!', '~', '?', ':',\n        '==', '<=', '>=', '!=', '&&', '||', '++', '--',\n        '+', '-', '*', '/', '&', '|', '^', '%', '<<',\n        '>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=',\n        '^=', '%=', '<<=', '>>=', '>>>='\n    ],\n    // we include these common regular expressions\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    digits: /\\d+(_+\\d+)*/,\n    octaldigits: /[0-7]+(_+[0-7]+)*/,\n    binarydigits: /[0-1]+(_+[0-1]+)*/,\n    hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // identifiers and keywords\n            [/[a-z_$][\\w$]*/, {\n                    cases: {\n                        '@keywords': { token: 'keyword.$0' },\n                        '@default': 'identifier'\n                    }\n                }],\n            // assume that identifiers starting with an uppercase letter are types\n            [/[A-Z][\\w\\$]*/, {\n                    cases: {\n                        '@keywords': { token: 'keyword.$0' },\n                        '@default': 'type.identifier'\n                    }\n                }],\n            // whitespace\n            { include: '@whitespace' },\n            // delimiters and operators\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/[<>](?!@symbols)/, '@brackets'],\n            [/@symbols/, {\n                    cases: {\n                        '@operators': 'delimiter',\n                        '@default': ''\n                    }\n                }],\n            // @ annotations.\n            [/@\\s*[a-zA-Z_\\$][\\w\\$]*/, 'annotation'],\n            // numbers\n            [/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, 'number.float'],\n            [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, 'number.float'],\n            [/(@digits)[fFdD]/, 'number.float'],\n            [/(@digits)[lL]?/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[;,.]/, 'delimiter'],\n            // strings\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/\"/, 'string', '@string.\"'],\n            [/'/, 'string', '@string.\\''],\n            // characters\n            [/'[^\\\\']'/, 'string'],\n            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n            [/'/, 'string.invalid']\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, ''],\n            [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@apexdoc'],\n            [/\\/\\*/, 'comment', '@comment'],\n            [/\\/\\/.*$/, 'comment'],\n        ],\n        comment: [\n            [/[^\\/*]+/, 'comment'],\n            // [/\\/\\*/, 'comment', '@push' ],    // nested comment not allowed :-(\n            // [/\\/\\*/,    'comment.invalid' ],    // this breaks block comments in the shape of /* //*/\n            [/\\*\\//, 'comment', '@pop'],\n            [/[\\/*]/, 'comment']\n        ],\n        //Identical copy of comment above, except for the addition of .doc\n        apexdoc: [\n            [/[^\\/*]+/, 'comment.doc'],\n            [/\\*\\//, 'comment.doc', '@pop'],\n            [/[\\/*]/, 'comment.doc']\n        ],\n        string: [\n            [/[^\\\\\"']+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/[\"']/, { cases: { '$#==$S2': { token: 'string', next: '@pop' },\n                        '@default': 'string' } }]\n        ],\n    },\n};\n"]}