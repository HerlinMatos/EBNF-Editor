{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/sophia/sophia.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","language","defaultToken","tokenPostfix","token","keywords","operators","symbols","escapes","integersuffix","floatsuffix","tokenizer","root","cases","include","whitespace","comment","doccomment","string"],"mappings":"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","file":"sophia.f8be510d.js","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/'],\n    },\n    brackets: [['{', '}'], ['[', ']'], ['(', ')'], ['<', '>']],\n    autoClosingPairs: [\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\n        { open: '{', close: '}', notIn: ['string', 'comment'] },\n        { open: '[', close: ']', notIn: ['string', 'comment'] },\n        { open: '(', close: ')', notIn: ['string', 'comment'] },\n    ]\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.aes',\n    brackets: [\n        { token: 'delimiter.curly', open: '{', close: '}' },\n        { token: 'delimiter.parenthesis', open: '(', close: ')' },\n        { token: 'delimiter.square', open: '[', close: ']' },\n        { token: 'delimiter.angle', open: '<', close: '>' }\n    ],\n    keywords: [\n        // Main keywords\n        'contract',\n        'library',\n        'entrypoint',\n        'function',\n        'stateful',\n        'state',\n        'hash',\n        'signature',\n        'tuple',\n        'list',\n        'address',\n        'string',\n        'bool',\n        'int',\n        'record',\n        'datatype',\n        'type',\n        'option',\n        'oracle',\n        'oracle_query',\n        'Call',\n        'Bits',\n        'Bytes',\n        'Oracle',\n        'String',\n        'Crypto',\n        'Address',\n        'Auth',\n        'Chain',\n        'None',\n        'Some',\n        'bits',\n        'bytes',\n        'event',\n        'let',\n        'map',\n        'private',\n        'public',\n        'true',\n        'false',\n        'var',\n        'if',\n        'else',\n        'throw'\n    ],\n    operators: [\n        '=', '>', '<', '!', '~', '?', '::', ':',\n        '==', '<=', '>=', '!=', '&&', '||', '++', '--',\n        '+', '-', '*', '/', '&', '|', '^', '%', '<<',\n        '>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=',\n        '^=', '%=', '<<=', '>>=', '>>>='\n    ],\n    // we include these common regular expressions\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    integersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,\n    floatsuffix: /[fFlL]?/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // identifiers and keywords\n            [/[a-zA-Z_]\\w*/, {\n                    cases: {\n                        '@keywords': { token: 'keyword.$0' },\n                        '@default': 'identifier'\n                    }\n                }],\n            // whitespace\n            { include: '@whitespace' },\n            // [[ attributes ]].\n            [/\\[\\[.*\\]\\]/, 'annotation'],\n            // Preprocessor directive\n            [/^\\s*#\\w+/, 'keyword'],\n            //DataTypes\n            [/int\\d*/, 'keyword'],\n            // delimiters and operators\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/[<>](?!@symbols)/, '@brackets'],\n            [/@symbols/, {\n                    cases: {\n                        '@operators': 'delimiter',\n                        '@default': ''\n                    }\n                }],\n            // numbers\n            [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n            [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],\n            [/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],\n            [/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],\n            [/\\d[\\d']*\\d(@integersuffix)/, 'number'],\n            [/\\d(@integersuffix)/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[;,.]/, 'delimiter'],\n            // strings\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/\"/, 'string', '@string'],\n            // characters\n            [/'[^\\\\']'/, 'string'],\n            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n            [/'/, 'string.invalid']\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, ''],\n            [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@doccomment'],\n            [/\\/\\*/, 'comment', '@comment'],\n            [/\\/\\/.*$/, 'comment'],\n        ],\n        comment: [\n            [/[^\\/*]+/, 'comment'],\n            [/\\*\\//, 'comment', '@pop'],\n            [/[\\/*]/, 'comment']\n        ],\n        //Identical copy of comment above, except for the addition of .doc\n        doccomment: [\n            [/[^\\/*]+/, 'comment.doc'],\n            [/\\*\\//, 'comment.doc', '@pop'],\n            [/[\\/*]/, 'comment.doc']\n        ],\n        string: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, 'string', '@pop']\n        ],\n    },\n};\n"]}