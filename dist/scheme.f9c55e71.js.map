{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/scheme/scheme.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","language","defaultToken","ignoreCase","tokenPostfix","token","keywords","constants","operators","tokenizer","root","include","cases","comment","whitespace","strings","multiLineString"],"mappings":"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","file":"scheme.f9c55e71.js","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    comments: {\n        lineComment: ';',\n        blockComment: ['#|', '|#'],\n    },\n    brackets: [['(', ')'], ['{', '}'], ['[', ']']],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n    ],\n};\nexport var language = {\n    defaultToken: '',\n    ignoreCase: true,\n    tokenPostfix: '.scheme',\n    brackets: [\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.square' },\n    ],\n    keywords: [\n        'case',\n        'do',\n        'let',\n        'loop',\n        'if',\n        'else',\n        'when',\n        'cons',\n        'car',\n        'cdr',\n        'cond',\n        'lambda',\n        'lambda*',\n        'syntax-rules',\n        'format',\n        'set!',\n        'quote',\n        'eval',\n        'append',\n        'list',\n        'list?',\n        'member?',\n        'load',\n    ],\n    constants: ['#t', '#f'],\n    operators: ['eq?', 'eqv?', 'equal?', 'and', 'or', 'not', 'null?'],\n    tokenizer: {\n        root: [\n            [/#[xXoObB][0-9a-fA-F]+/, 'number.hex'],\n            [/[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?/, 'number.float'],\n            [\n                /(?:\\b(?:(define|define-syntax|define-macro))\\b)(\\s+)((?:\\w|\\-|\\!|\\?)*)/,\n                ['keyword', 'white', 'variable'],\n            ],\n            { include: '@whitespace' },\n            { include: '@strings' },\n            [\n                /[a-zA-Z_#][a-zA-Z0-9_\\-\\?\\!\\*]*/,\n                {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@constants': 'constant',\n                        '@operators': 'operators',\n                        '@default': 'identifier',\n                    },\n                },\n            ],\n        ],\n        comment: [\n            [/[^\\|#]+/, 'comment'],\n            [/#\\|/, 'comment', '@push'],\n            [/\\|#/, 'comment', '@pop'],\n            [/[\\|#]/, 'comment'],\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, 'white'],\n            [/#\\|/, 'comment', '@comment'],\n            [/;.*$/, 'comment'],\n        ],\n        strings: [\n            [/\"$/, 'string', '@popall'],\n            [/\"(?=.)/, 'string', '@multiLineString'],\n        ],\n        multiLineString: [\n            [/[^\\\\\"]+$/, 'string', '@popall'],\n            [/[^\\\\\"]+/, 'string'],\n            [/\\\\./, 'string.escape'],\n            [/\"/, 'string', '@popall'],\n            [/\\\\$/, 'string']\n        ],\n    },\n};\n"]}